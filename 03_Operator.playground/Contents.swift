//: Playground - noun: a place where people can play

import UIKit

var str = "Hello, playground"

/*
 运算符
 1. 运算符是一种特殊的符号, 它可以对相应的数据类型的运算数进行运算
 2. 根据运算符涉及的运算数个数不同, 可以将运算符分为三种:
     1.) 单目运算符 -a !b
     2.) 双目运算符 a+b a*b
     3.) 三目运算符 a?b:c
 3. 运算符分为两大类
     1.) 基本运算符
         a.) 赋值运算符
         b.) 比较运算符
         c.) 算数运算符
         d.) 逻辑运算符
         e.) 三目条件运算符
         f.) 区间运算符
         g.) Nil Coalescing运算符
    2.) 高级运算符
         a.) 位运算符
         b.) 溢出运算符
         c.) 运算符方法
         d.) 自定义运算符
 */
/*
 赋值运算符
 1. 赋值运算符 用于将一个变量, 常量, 直接数或表达式的值赋值给另一个变量或常量
 2. 简单赋值运算符
     1.) =
     2.) 右边的值赋给左边
     3.) 与其他语言的区别
         a.) 在 C 与 OC 中, 赋值语句返回 = 左边的值, 并且 0 表示 false, 非 0 表示 true, 因此, 在if语句的条件判断中, 程序可以在==误写为=的情况下编译通过
         b.) 在 Java 中, 虽然不能用整数表示 true 或者 false, 但是如果 = 右边的值正好是 true 或 false, 在 if 语句的条件判断中, 程序仍然可以在 == 误写为 = 的情况下, 编译通过.
         c.) 在 Swift 语言中, 简单赋值运算符不返回任何值, 因此, 在 if 语句的条件判断中可以避免将 == 误写为 =
 3. 复合赋值运算符
     1.) 由简单赋值运算符 与 基本运算符 组成
     2.) 常见的复合赋值运算符 +=, -=, *=, /=, %=, <<=, >>=, &=, |=, ^=
     3.) 复合赋值运算符 也不会返回任何值
 */

/*
 比较运算符
 1. 用于基本数据类型的比较运算符有六个: ==, !=, >, >=, <, <=
 2. 用于引用类型的的比较运算符有两个: ===, !==
 3. 比较之前, 必须将数据类型转换为相同类型
 4. 如果两个元组的元素数量相同, 并且所有位置的相应两个元素都可以使用上面的比较运算符进行比较, 那么这两个元组就是可以比较的, 其比较规则为: 从左到右, 依次比较每个位置相应的两个元素, 知道某个位置的相应两个元素的值不相等, 其比较结果就是元组的比较结果, 且不再比较后面元素的值. 如果所有位置的两个元素比较结果都相等, 那么这两个元组就是相等的, 但是 Bool 类型的值 是不可以进行比较的. 并且, 元组中的元素最多为六个, 当元组中的元素多于六个时, 那么必须使用自定义比较运算符
 */
8 == 8
6 != 8
6 > 9
6 < 9
(1,2,3) == (1,2,3.0) // true
(1,2,3,4) < (1,2,3,5) // true
(1,2,3,4) < (3,2,3,5) // false

/*
 正负号运算符
 1. 正号运算符 +
 2. 负号运算符 -
 3. 正号运算符对运算数没有任何改变, 当在代码中对负数使用负号运算符的时候, 可以对正数使用正号运算符, 以便增加代码的可读性
 4. 正负号后面不可以有空格
 */
let eight = 8
let plusEight = +eight
let minusEight = -eight

/*
 算术运算符
 1. 加法 +
 2. 减法 -
 3. 乘法 *
 4. 除法 /
 1.) 如果两个整数进行除法运算, 那么结果只保留整数部分
 5. 取余 %
 */
19 / 4 // 4
19 / 4.0 // 4.75
19.0 / 4 // 4.75
19 % 4 // 3


/*
 逻辑运算符
 1. 逻辑运算符有三种
     1.) 逻辑与 &&
     2.) 逻辑或 ||
     3.) 逻辑非 !
 */
if true || false {
    print(true)
}else{
    print(false)
}

/*
 三目运算符
 1. 判断条件 ? 条件执行体1 : 条件执行体2
 2. 相当于if-else语句的运算规则
 */
let score = 80
var result: String = score >= 60 ? "Pass" : "Failed"

/*
 区间运算符
 1. 闭区间运算符 a...b 表示 [a, b]
 2. 半闭半开区间运算符 a..<b 表示 [a, b)
 3. 注意:
     1.) 当 a 和 b 都是整数时, a...b 等价于 a..<(b+1)
     2.) 当 a 等于 b 时, a..<b 表示空区间
     3.) a 不能大于 b, 否则会导致运行时错误
     4.) 如果 b 是负数, 必须用小括号将其括起来, 否则会导致编译错误
 */
(5...8).forEach{print($0)} // 将所有元素都打印出来 5,6,7,8
(-5...(-1)).forEach{print($0)} // 将所有元素都打印出来 -5,-4,-3,-2,-1
let array = ["java", "c#", "oc", "kotlin"]
for i in 0..<array.count{
    print("\(array[i])")
}
(5...8).contains(8) // true
(5..<8).contains(8) // false
(5..<5).isEmpty // true
(5..<9).isEmpty // false

/*
 NilCoalescing运算符
 1. 该运算符用 ?? 表示
 2. 其语法格式为: a ?? b, 其中 a 总是可选类型, b 的类型必须与 a 包装的实际值的类型保持一致
 3. 对应的运算规则是如果 a 为 nil, 返回 b; 如果 a 不为 nil, 返回 a 包装的实际值
 4. 等同于 a == nil ? b : a!
 5. NilCoalescing运算符时短路运算符, 也就是说, 对于 a ?? b, 如果 a 不为 nil, 将不再计算 b
 */
var nilValue: Int? = 13
nilValue ?? 18 // 13
nilValue = nil
nilValue ?? 18 // 18

let defaultColor = "red"
var userDefinedColor: String?
var colorToUse: String
colorToUse = userDefinedColor ?? defaultColor // red
userDefinedColor = "blue"
colorToUse = userDefinedColor ?? defaultColor // blue
